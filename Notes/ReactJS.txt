React JS:
----------
-It is a open source library for building User Interfaces
-It is not a Framework
-It is Introduced by Facebook/Meta
-It has a huge community
-It will use Component Based Architecture
-It supports reusable code
-React is Declarative
-React will render components effectively
-DOM updates will be handled by React
-React Native for native mobile application development
-prerequisites for react are HTML,CSS,JavaScript and Modern JavaScript(ES6/ES7)
-Fundamentals,HTTP,Routing,Redux and Utilities
-React will use eco sysytem of Node JS
-we can download node js from "www.nodejs.org"
- https://nodejs.org/dist/v20.10.0/node-v20.10.0-x64.msi
-NPM Node Package Manager

Create First React APP:
----------------------
npm install create-react-app

npx create-react-app project-01

cd project-01

npm start

Extension for VS Code:
----------------------
	ES7+ React/Redux/React-Native snippets

Components in React:
------------------
-Components are building blocks of any react app
-Components are part of UI
-In React template, the root component is named as 'APP'
-Components are reusable
-Components can be nested(one component can render inside another components)
-The extension of React components will be *.js or *.jsx
-Every component file name should start with a capital letter.
-There are 2 types of components available
	1.Functional Components
	2.Class Components


1.Functional Components:[rfce/rafce]
-----------------------
-These are simply javascript functions
-These will optionally receive object of properties(props)
-These will return HTML content as UI (Known as JSX)
-Functional Components will Accept Props and Returns JSX

2.Class Components:[rce]
-------------------
-These are ES6/7 Classes
-Class components also will recive optionally an object of properties (props)
-These also will return HTML as UI(JSX)
-Additionally Class components will maintain a private object memory called 'state'


Props:
-----
-Props is a object of properties

State:
------
-It will be active in class components
-It is a private object memory
-Can be Initialised in only Constructors of the class


Life Cycle Hooks in React:
-------------------------
1.Mounting:
*************
-when an instance of a component is being created and inserted into the DOM.

constructor():
------------
  It is a special type member function which gets called whenever a new component is created.
  It will be used to Initialize the state
  It will directly override this.state
  Props will be sent to parent class(Component) from construtor using Super(props)

static getDerivedStateFromProps():
----------------------------------
  It will be triggered when the component is depends on the changes
  It will be directly change the state values without using setState()

render():
--------
  This is the only required method
  Reads props&state and returns JSX
  Children Component life cycle will start from here
  We can not set the state inside render

componentDidMount():
--------------------
  Invoked immediately after component and its child components have been rendered in DOM
  This will be used to perform AJAX/API calls
  

*********
Updating:
*********
static getDerivedStateFromProps():
----------------------------------
  It will be triggered when the component is depends on the changes
  It will be directly change the state values without using setState()

shouldComponentUpdate(nextProps,nextState):
-------------------------------------------
  Dictates if the component should re-render or not
  It will be used for performance optimisation
  
render():
--------
  This is the only required method
  Reads props&state and returns JSX
  Children Component life cycle will start from here
  We can not set the state inside render

getSnapshotBeforeUpdate(prevProps,prevState):
--------------------------------------------
  This can be called right before the changes from the Virtual DOM are reflecting the DOM
  We can Capture old values from state/props before they get changed
  this method will wither return null or a snapshot of previous values

componentDidUpdate(prevProps,prevState,snapshot)
-------------------------------------------------
  This method will be called after the render finished its re-render cycles

  
*************
UnMounting
***************
-When ever a component is removed from the DOM

componentWillUnmount():
-----------------------
  This method will be invoked right before component is unmounted and destroyed
  It will be useful for cancelling any network requests,removing event handlers,cancelling any subscriptions
  we can not change the state

**************
ErrorHandling:
**************
  When there is an error either during rendering,in a life cycle method or in constructor or in any child component then the component will under go into error handling phase

static getDerivedStateFromError(error)
componentDidCatch(error,info)












